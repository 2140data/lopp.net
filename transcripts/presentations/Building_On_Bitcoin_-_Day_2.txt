For foundation or organization that represents the interests of the different people playing?
Also, should it be on the Bitcoin alone or should there be action
matched with other cryptocurrencies adjoining specific interests on some topics?
So among the strategies, the first one I'd like to present is simply the courts.
It's not because the government or the administration are generally not so inclined to adopt and see adopted Bitcoin
that we don't have rules and fundamental rights that can protect anybody to be willing to use Bitcoin and so on.
And there are principles that protect this use.
For instance, the principle of privacy that's written in different declarations of rights and constitutions
and also the rules on due process when administrations are trying to forbid a particular type of business
without having the ground to do so.
There has been an example recently about this in Israel where a company refused to have a bank account by a bank
and they actually managed to have from the Supreme Court of Israel the right to open this bank account
on the ground that the bank didn't prove that there was enough risk to justify that they would not allow the bank account.
And so if they had no proof of that, they had no right to forbid this company to have a bank account.
Same for the freedom of expression.
So freedom of expression is maybe a bit old, but at the beginning of the crypto space,
that was an important ally in avoiding the rules that, for instance, in the United States,
you were not allowed as an academia to publish about cryptography and to travel abroad and explain cryptography
because it was considered as a weapon and was under embargo as any weapon.
And on the ground of freedom of expression, academia has succeeded in challenging these rules.
And proof value also of decision.
Also, there is another strategy to gain the public debates and media.
This is important because you remember I told you that politicians are sensitive to the trends and the movement in the public opinion.
And I think that making reasonable arguments in the public media is really a key to change rules.
One element that's easy to win is how much Bitcoin ensures integrity.
So a lot of rules about the payment regulation are not so much applicable because the system ensures the integrity, technically.
Also, another argument that's a bit more recent is the liquidity, like the manipulation and so on of the Bitcoin was easier at the earlier stage.
But nowadays we have elements to prove that it's becoming an asset more liquid.
That's a research from a professor at the University of Humboldt.
And he's been measuring the liquidity of Bitcoin over the last years and months.
He's showing that definitely there is more and more liquidity in the Bitcoin space that ensures a fair market.
The partial transparency of Bitcoin also is an interesting element and interoperability.
Remember, I told you about the element of fair competition being a regulatory objective.
And Bitcoin can definitely, and this is the argument, be this layer of interoperability.
Another strategy is regulatory arbitrage.
So I'm sure I'm not making you discover that.
But it is important to think that it's not only a way to just shop around and find the best regulation.
It's also a good way to leverage on governments and showing them the different kind of option and regulation.
And there is really an interest in not so much having heaven where it's just simple,
but having flagship countries where the regulation is going to be more easy
and where there are going to be a good economy growing out of that.
Because for politicians in general, the key element is this ability to show that it was in the end positive for the economy.
We have to be aware also that it's not a surprise that the rules are stricter in New York, in London or in Berlin compared to Tech7.
Because on the other side, regulators also know the leverage they have,
like places where you have a lot of users, where you have a more vivid ecosystem,
they know that it's more interesting also for companies to get there.
So just the idea of we're going to just move to the country where it's going to be the easiest is not an end solution.
Because the key question is to be aware as a business where your customers are.
And the customers are definitely in places that are always going to be a bit more heavily regulated,
hence the interest in having a good strategy toward them.
And then, of course, there is the strategy of full decentralization to embed some of the rules in the code
to self-regulation of the ecosystem, which implies definitely to have some political consensus
of what are the rules that needs to be enforced by the community or by the code directly.
Finally, I would like to finish on this.
There is some compromise to be made and interest in having the link with the regulators
is not just a question of rules versus the freedom of a business.
As Bitcoin businesses, there is an interest also for having linked and helped from law enforcement and regulators.
A few examples I would like to point out is the prime of secret mining.
So the lawsuit that's going on against Bitcoin.com that's using the brand Bitcoin to attract people to another project.
The market manipulation, of course, and more gloomy aspects I'm going to be investigating in the next month.
That's about the patents that are getting deposited on the space
and where it might be dangerous in the end for certain projects and meet the creativity and so on.
So this is it. Thank you very much for listening.
If you have any question, I'd be happy to answer it, if I may.
I wonder if you have any comments on mining because you talk a lot about the regulations in regards of Bitcoins.
But mining, for instance, I come from Quebec and in Quebec there has been a moratorium for Bitcoin mining businesses
where they've changed the rates just for us and they put it three times more expensive.
So do you have any comments maybe about regulations and mining?
So I know less about mining and I know more about payment regulations.
What was increased three times?
They've increased the rate for miners in Quebec.
For instance, we have data centers, they have a very special rate.
And for miners, they took this rate and they multiply it by three times.
They say it's a dissuasive rate to send us away.
Yeah, so that goes back to fundamental rights.
For this, this is typically a problem of equality and I would fight the hell out of them in these grounds.
Yeah, those principles, it's not new that governments try to infringe and impose a certain vision of which activity should be OK or not.
But unless it's really proven that an activity is dangerous, there is always the recourse of...
Well, there is always the possibility to try against this kind of behavior, if I understood correctly.
Yes.
Hi, I would like to...
Hello.
I would like to know, yesterday the main speech was about privacy.
And by the developer point of view, the privacy has to be a lot more.
A layer that should be more intense on Bitcoin.
But by regulatory point of view, the privacy is a mess with the AML and KYC regulation.
How do you see the forecast in this issue?
Yeah, as I mentioned anyway, even in the regular bank industry, there is no clear view on how that should be done because it's always conflicting.
You need to know who is your customer, you need to report any apparent illegal activity, but at the same time you need to protect the data.
You protect from a breach, but also even protect from the government.
Most rules for privacy have been designed against the government and their tendency to infringe on citizens' privacy.
So there is a need of privacy in payment services and there is a need of more privacy on using Bitcoin at the moment.
Because there is no meaningful way to use it if your transactions are just in the open.
And how it should be combined?
Well, one first aspect concretely on what's going to happen in the next month is that anyway the privacy enhancements are quite distinct from the core protocol.
So it's not going to forbid the Bitcoin to flourish and on the other side there are going to be some people using privacy systems.
And as I mentioned, there are going to be court cases that are going to try to solve what kind of responsibility you take when you're using this kind of privacy.
But there should be a reasonable solution found where we can ensure to be able to tackle the problem of money laundering while keeping the user privacy.
More further in the future, I think that what's going to win in the end is to have well-designed systems that are going to embed these requirements in a way.
So to have privacy systems that work until a certain kind of allowance, but if you try to go above this kind of allowance,
you have to use another kind of privacy system where somebody can watch and actually control what's happening.
I don't have the perfect design for this yet, but I'm sure we're going to see some solution in that sense in the future.
Hi, thanks for the talk.
I'm just wondering if you could expand a little bit on the regulatory capture topic.
So Bitcoin is a permissionless decentralized protocol, so it's not going around capturing regulators.
There are other shitcoins, prominent ones that have CEOs and cult leaders that do seem to be very effective at capturing regulators.
Just wondering if you think that might have an impact on Bitcoin?
Yeah, that's actually what was the point of me saying that.
It's actually an important danger that more commercial coins have more the ability to fund lobbying activities and be able to reach to regulators.
Honestly, so this is more sentiment, but for every regulators I've met and politicians and so on,
I think that we've gone above the initial fear of Bitcoin and know they are all curious of the space.
And also we have gone beyond the just blockchain noise.
They have realized that this is something I don't think that takes any position on which cryptocurrency should be used and which one is going to lead and so on.
And they don't have any preference. And even in France, that has been really adverse to Bitcoin.
So I know not everybody would agree with me, but I feel like the sulfurous image of the beginning is fading away.
So even if Bitcoin don't have the mean to do any lobbying, it's going to be never treated less fairly, I guess, than the other.
So that's why also I was mentioning the ability to sometimes decide when it's strategic to think as a global ecosystem of cryptocurrencies.
And when on the contrary, there should be a point made of like this works differently.
This is not the same point. You've seen the decision of the Securities Exchange Commission a few months ago.
So it was trying to assess whether some coins were a security or not and made the clear view that Bitcoin would not be considered a security,
because it definitely worked in a really fully decentralized way, which was not the case of most other cryptocurrencies.
So the view is the noise is being settled down and I think the interesting quick quality of Bitcoin in a really fair way are being exposed.
And there is enough advocates, for instance, for what I know in France, like you have prominent actors of Bitcoin that are able also to reach.
And so they might not be as organized, but it's like open source project.
It's been 20 years I've been interested in open source project and there is this part of responsibility that everybody in the ecosystem takes
and that makes it work in the end, not as strongly, obviously not with enough means sometimes.
But for this point, I think it's not a problem.
Hi Xavier, thank you for the presentation. It was really interesting.
I'm curious under the section that you said challenges of regulators and you said institutional competition.
And you gave an example of the 13 or so French commissions on the subject.
Three questions here. How do the institutions compete with one another? What's their incentive?
Why are they doing that and fighting one another? And then do you have a real life example of that in action?
Well, I'm seeing what's happening in France at the moment in this space and it's really funny.
Each institution has different strategy and objective.
But at some point I was saying that if you were in any institution working on financial aspect and you were not regulating cryptocurrencies,
you were looking them like you had to say something and act on something.
At the moment it's been in France a lot of each authority trying to make a position and also going stronger and stronger,
each of them reinforced by the other one.
The first two years ago declarations were really timid and so on and the more they gain confidence that others are doing kind of the same,
that goes above.
Hi, thanks a lot for the presentation.
I tend to think that all the rest of the presentations are very funny for people who love technology,
but the real fight in the long term is this one because I think that the core proposition of Bitcoin just undermines a lot of the current status.
So it's difficult for me to see the question.
Which countries do you see are taking healthy steps to get Bitcoin in the economy?
And can you give some examples? Because in the long term I just see disruptions.
I don't see how Bitcoin can fit in the current financial system.
Thank you. Yeah, it's a good question.
My impression is that most countries at the moment, I don't know every country and I haven't met most of them,
but my impression is generally the idea is to let go.
So what's going to be critical is the mass adoption and the mass adoption is not going to be decided by the regulators.
And currently what's stopping people from using Bitcoin is mostly to understand how to use a wallet, to understand how they buy.
You know, like every one of us, like 80% of my friends are interested into it, but like 2% of them own any Bitcoin.
And I think for everybody here it's this kind of proportion.
So that's the main problem. So maybe this is first and then they're going to decide what's going to happen.
The same position for any government and the right way to do it at the moment would be to just do nothing.
Because if people want to use Bitcoin to pay, it's fine.
And for instance, in France, like there are now several businesses that accept Bitcoin and it's been clarified by the tax administration,
how it should be dealt with. And so, you know, it's like becoming something really, really lambda.
So now the other fight is the mass adoption. And that's going to be another key, too.
Yeah, my question is somehow probably connected with your question.
Have you ever thought about ignoring the regulator, letting the open market decide what the rules should be?
And, you know, just let it bloom from bottom to the top.
What you're dealing with is that you're trying to impose some rules and construct them the way that the laws should do something or whatever.
I mean, like I said yesterday, I'm an anarchist, so I don't see the government to be involved into this crypto infrastructure.
So, I mean, just ignore it. Let them lag behind. Let them whatever collapse or whatever do what they want. Let's let's leave the open market develop parallel.
You know, I see what I try to explain today is that on one side there are some legitimate question to be to be raised.
Like money laundering is not good for any any economy, and then it could be a specialist debate. Like, is it a good way to regulate to to avoid illegal activity?
But if we consider that illegal activity are bad, we should have some money laundering because it's the best way to tackle the benefits of this illegal activity like selling drugs and so on.
So that's one side of thing. But the second one that I mentioned, and that's more problematic, is there is an interest of governments anyway to get hold on what's happening in the Bitcoin space,
because just that how the incentive is structured to to show that they control this ecosystem.
And there I might join you like maybe would be more healthy to just do nothing and let it be.
But on one side, we have to acknowledge that there are some elements that make sense to have some some control and trying to find the right balance between privacy and and illegal activity.
Thank you.
Yeah, it's crazy. I know you hate it.
Hmm.
And give impressions of the presentation.
Yeah.
Good morning, everybody. So in the meantime, that it loads, hopefully.
Hello, I'm Jacko Mazzucco. I'm the founder of BHB Network and blockchain lab Switzerland consulting company. We do basically consulting Bitcoin related consulting for institutional players, banks, especially in Switzerland, especially.
And we also have the BHB initiative that is an initiative created to support and help and enable in any possible way the research and development on top of Bitcoin and standardizations, efforts and cooperation efforts and and one.
So yeah, already did the presentation. So my talk today is about assets on Bitcoin. The subtitle is yes. Okay. Financial sovereignty and crypto anarchy are cool. But what about those crypto kitties?
So there are priority in life, right? So the topic of this presentation is how to issue known Bitcoin assets. So assets that are not Bitcoin are not live Bitcoin on top of the Bitcoin protocol.
And when I say on top, I will I mean a lot of possible options that I will try to clarify in this presentation. That is part review of past efforts in this regard and part new proposals.
I will also present a new humble proposal. We are just launching to try to converge around some some best practices and standards in that in the topic of the known Bitcoin Bitcoin based assets. So your thoughts right now are in disorder.
I mean, I guess that the thought of 99 percent of the people in the audience are these ones like the first is if you have it. Yeah. Okay. We are hearing about Bitcoin based assets since 2011.
Yeah. Bitcoin 2.0. Very, very cool. But first, if you have a centralized issuer and redeemer of the right associated with the asset, why the hell do you need decentralization at all for the transfer of the assets?
If you if anything related to the content of that right is in the hands of the issuer, which is centralized by definition, then you just use a database in the just use a database, right?
They sure can use a database. The second objection you use is usually something like even if you need some degree of decentralization, why do you have to build on top of something that have a very specific purpose?
And a lot of challenges to do good what it already does. So to be permissionless money.
So why do we want to be on Bitcoin? Try to build some separate system for assets.
Maybe you can do some optimization. Maybe you can be more free to experiment different stuff.
For example, well, a side chain like confidential assets on liquid that hit the news just yesterday is a solution which is different from Bitcoin itself, leveraging some parts.
But one objection could be just leave Bitcoin alone, please. We are not doing assets. Do something else.
Maybe somehow decentralized. The third of the third objection is usually even if you have some utility in piggybacking in leveraging Bitcoin somehow, you shouldn't.
Maybe because what you do may mess up with Bitcoin scarce resources, which is basically block space and bandwidth.
Because you are going to do to use our block chain for purposes that are not interesting for Bitcoin notes.
So there is people giving you bandwidth and storage for free.
And you are abusing that to do something which is not directly related with the Bitcoin project itself.
Also messing up with incentives like what if you are using this asset system to promote a scam coin, which is somehow in competition with Bitcoin asset itself?
Or what if your asset, even if it's different, even supposing that your asset, I'm too short, so I will do this.
Even if you're also so you can see Carlos Matos here.
So even assuming that your asset is different from Bitcoin is not a Bitcoin clone or a Bitcoin competitor,
maybe the value of the assets will be more than the value of the market cap of Bitcoin itself.
And that may screw up the incentives in the long run, maybe with reward going down.
I mean, it can be a problem.
The last objection usually is, yeah, OK, cool, but this isn't a new idea at all.
We already discussed this. We already tried this. There was a counterparty coin project, a lot of effort.
They didn't work. They didn't get any traction.
People are now doing crypto kitties on Ethereum.
And so why even bother to try something new or to discuss it again?
So in the next minutes, I will try to address some admittedly not all of these issues and these concerns.
And I will try to convince you that it's a very good idea to put time, effort, skills and money right now
into a standard for non-Bitcoin assets on top of Bitcoin.
Then I will fail miserably in convincing you of this,
but you will not leave the room for the second part of the presentation, please,
because I have some backup arguments for my thesis.
So the first backup argument, I call it the vape pen argument.
So I don't know who is smoking here.
Smoking is bad. It's bad for health. You shouldn't smoke.
But if you do, you should probably use the way which is less damaging possibly.
So you should smoke in the way that limits the most damages for your health.
I actually smoke cigars, so I don't like vape pens.
Anyway, it's a sound argument.
So the second argument is the Jenga argument.
If you play Jenga, when you build on top, then it's very, very hard for everybody,
competitors, regulators, everybody, to try to remove the pieces on the bottom.
So the more you build on top, the more difficult to change or to stop the base layer becomes.
So even if the blocks that you put û this is a blockchain, right?
Even if the blocks you put on top are not interesting,
they are somehow reinforcing the stability and the immutability of the layer on the base.
Let's consider this. This is a good example.
So I like to compare scammy ICOs with.com bubble, with.com scams.
So they were scammy enterprises like pet.com, a crazy bubble, a rational market.
But an interesting thing is that while Internet itself had its protocol wars
against scammy competitors like the ISO-OSI protocol,
the history was that first there was the protocol war.
The true, real, decentralized, cool protocol won the Internet.
Then we had the.com bubble on top of the Internet.
The question I would like to ask you is,
do you think that the Internet itself would be better off
if the.com scam bubble was implemented on top of ISO-OSI instead of TCPAP?
So out of the comparison.
Are you sure that the fact that now people are scamming people on top of Ethereum
is a better thing for the Jenga effort than if people were scamming people on top of Bitcoin?
That's not a rhetorical question. I really wonder myself that.
In a way, you are dissociating yourself from scams,
so you are protecting your base layer from bad reputation, maybe a regulatory crackdown.
But in a way, people are building scams on the Internet and on Ethereum,
and they are not building a lot of scams on top of Bitcoin.
Yeah, they are, but for example, giveaways are always on Ethereum.
That's annoying.
So that's the Jenga argument.
You should build stuff on top of Bitcoin even if you are not convinced.
You should let people build stuff on top of Bitcoin.
Maybe don't help them, but don't necessarily stop them.
The third argument is the permissionless stress test argument.
So what if some of the things that you can build on top of Bitcoin,
they do reinforce the base layer immutability, but they also crash the base layer
because they are too heavy, they are unhygienic, they are not good for the protocol.
So they are blocking the blockchain, they are reducing anonymity.
In this case, the interesting thing about assets is that many proposals,
like the proposal I will try to launch today, are permissionless.
Not all the proposals involve a change in the Bitcoin protocol consensus layer.
So many of these proposals can be launched anyway.
So the thing is that you should also try to address this kind of initiative,
this kind of users.
If people can leverage Bitcoin storage for free, free riding on top of that,
to do assets, then people will do that.
Yes, you can try to evolve Bitcoin in order to make it difficult, but not forever.
There will come a time when Bitcoin will be kind of immutable at the base layer
and everything can be done on top of it, will be done on top of it.
So it's interesting to analyze what things you can do in this regard.
The fourth argument is the architectural experiment argument.
So there are some experiments that involve architectures that are radically different
from the Bitcoin's blockchain.
You can think about MimbleWimble or Peter Todd's ProofMarshall architecture,
so something which is radically different.
So you cannot experiment that on Bitcoin now.
Yes, you can do tests, but you cannot experiment it in real game theory life
with economic incentives on top.
So you can create an altcoin, but that's a bad thing because you're creating
a Bitcoin competitor diluting the Bitcoin proposition.
The best idea is to create an interoperable sidechain, of course,
but short of that, the nice idea to experiment with assets is that you can experiment
with new architecture that are not possible to try on Bitcoin directly today
on this kind of not Bitcoin, strictly not Bitcoin assets,
so they are not necessarily competitor with Bitcoin,
and then you can just vet the results.
And we are going to do exactly that.
Spoiler, the proposal that I'm going to present you today is based on the
client-side validation idea of Peter Todd, and we are trying to use that
on top of issued assets instead of Bitcoin, which is not trivial to do.
The last argument is the strongest, and it's the Bruce Fenton argument.
So the argument goes like this. We all love Bruce Fenton, right?
Everybody in this room loves Bruce Fenton.
So Bruce Fenton's tweet stream was very, very rich and various,
like he was talking about gun rights and pollution, capitalism,
a lot of interesting stuff.
But then on March 23, he started to talk about tokenized security.
And then again, and then again, basically every day, tokenizing, collectible,
tokenized security, and the Twitter, he also issued a 100 Bitcoin bounty
to demonstrate that you cannot do on a database what you can do on a blockchain
with tokenized security.
And then he started to publish memes about tokenized security.
And then he started to publish videos on tokenized security.
And then, I mean, yeah, TZero and Ravencoin and other videos, and yeah,
Ravencoin again, I mean, every, literally every, oh, comics, other videos,
other memes, other memes, and his friends are not helping.
They talk with him about securities, tokenized security.
They invite him to security token conference.
So basically, you cannot talk with Bruce about anything else,
and we need to help him healing from his obsession.
So please, let's do for him.
Maybe it doesn't make sense, but we have to help him.
So now I will try to expose, I will try to list some use cases that I think
make sense on top of the decentralized network and possibly on top of Bitcoin
itself, and I will try later to clarify what I mean with on top.
The first idea that makes sense on a decentralized system about assets is an
asset which is completely independent from the issuer.
Of course, no asset can be independent from the issuer at the beginning.
Even Bitcoin is not independent from Satoshi Nakamoto in the genesis block.
But then, everything that happens to the asset after the issuance moment,
including its value and the perception of its value by the market,
will be completely independent by the issuer.
The issuer cannot touch it, cannot redeem it anyhow.
So of course, what people think about asset independence is mostly science fiction,
things like DAO organizations, but these are very, very difficult to do,
not really realistic right now.
But in principle, you can think of something like that.
This could make sense.
For example, I create some kind, not now, but maybe in five years,
I have some kind of technology that allows me to create a betting game on top of
Bitcoin, completely decentralized and trustless.
And the creator of the game, of course, he takes some fee because he created the
game, Ethereum contract-like, and then he says that if you pay some amount of
Bitcoin, he will use this amount of Bitcoin first to buy his Lambo,
but then to promote the betting contract.
And he will give back a percentage of the fees to everybody,
pro-quota, to everybody that gave the Bitcoin.
So some kind of illegal securities, some kind of illegal,
illegal is a paralegal, securities and royalties and equities.
So crypto equities, black market, gray market, stock market.
That's cool.
It's not realistic, but I don't think that we should rule out this possibility
in the long run at all.
You can have, for example, Kickstarter-like, all or nothing contracts
that give you, I mean, there are arguments about total asset independence.
Then there is the argument about asset transparency.
Asset transparency basically is, yes, you still have to trust me somehow,
or you still have to rely on something which is centralized.
For example, I issue regulated stocks on the stock market,
but maybe you are afraid that I will manipulate the total supply
or I will manipulate the ownership states of the assets,
and you want to be sure that I can't because I am committing technologically
to the total supply or to the distribution model right now.
So this transparency can be useful in two ways.
One way is because maybe regulators, I mean, if you are a stock market,
why should you use a blockchain?
The main costs are not technical, they are legal,
and the regulator is not going to give you a break from compliance
just because you're using a blockchain right now.
But maybe in 10 years, if you prove that you cannot inflate the supply,
then you will have, or you cannot modify the past trade,
then you will have some kind of regulatory exemption of some kind.
I don't know.
Then there is asset blindness.
I think this is very, very interesting.
So assume that you are issuing a regulated asset on top of a protocol,
and you're issuing activities completely following KYC, AML, SEC guidance.
You are not selling to unqualified investors.
You are not selling to anonymous people.
You require KYC to issue and to redeem.
But because of how the protocol is built,
people can actually, without you even knowing it,
trade this asset on a secondary market that cannot directly redeem.
So just to make you an example,
if you give me $1 to this bank account,
I will give you a dollar equivalent asset on a blockchain.
I am only serving KYC customers,
but then these KYC customers can trade this stuff
permissionlessly on a black secondary market,
gray, which is better, secondary market,
and then somebody else, which is already registered,
can come back to redeem the dollar.
Of course, this is completely centralized and trust-based,
but it has a utility, basically providing a plausible deniability for the issuer
instead of having to admit they are actively enabling a black market.
The last argument is, the last possibility is just standardness.
So people right now is maybe chatting in this room,
yeah, this presentation is a scam,
and you are writing that on Telegram or Signal.
You are using the Internet.
So you are using the Wi-Fi of this conference center
to go to some switch somewhere in the world
to get back on 4G on a cell phone.
That doesn't make any sense, technologically speaking.
You should use proximity communication.
You are abusing an open network.
But there are good reasons to do that,
because this open network is so widespread
and so established for open communication
that even for closed communication,
you are just piggybacking it because you are just externalizing your costs.
So you have to build a company portal,
a closed permissioned company portal.
You are going to build it in 1992.
You don't use TCPIP.
That doesn't make any sense.
TCPIP for open communication.
Use a mainframe.
But you are going to create a company portal in 2018.
You do use the Internet, and then you close the Internet
because you are just, I mean, it's easy.
You are reusing code, code base, tools, library,
habits from the users, infrastructure.
So after bitcoin, after hyper bitcoinization,
there will be a lot of reasons to use bitcoin standards
and code base to reuse every part of bitcoin
you can reuse even for permissioned centralized trust-based system.
Of course, the nice thing is that the third use case can,
well, I will give you some examples.
So the first example is smart rights, right?
So I give you something that in an independent way, trustlessly,
will give you access to some money on the blockchain.
So for example, crypto royalties for a betting contract on the blockchain.
Then probably honest rights.
There is something which is halfway,
but I think it's an honest use case,
which is basically digital collectibles.
So when you have digital collectibles, in a way,
the life of the collectibles is independent from the issuer.
Once an artist created the digital collectibles
and he issued it on the blockchain,
and you just can check the scarcity,
so you only need transparency to make sure that the supply is really limited,
then you don't really need an active involvement by the artist or the company itself.
The artist could die, so his server could be shut down,
and the company could fail, and the company's service could be shut down,
and still this collectible could be traded for 10, 20, 40 years.
I mean, if the Beanie Baby company shut down,
you still trade the Beanie Babies on eBay.
And that's something that has a utility.
So to decouple the technology infrastructure of the issuer
from an independent transmission protocol that can be used to transfer
and to check the total supply.
Another example could be about asset standardness, whatever.
So many clients come to our consultancy company,
they want to issue assets, and they ask me,
should I use ERC-20?
And I say, no, it's a scam.
I mean, it's not private, not scalable.
Ethereum will just crash down soon enough.
So don't do it.
So what I should use?
Well, you should create your own database system.
So I have to select a stack.
I have to bootstrap a database system.
I have to maybe code something.
Why?
I can just install an Ethereum node.
I cannot sync it, but I can install it.
And then I can issue, on top of that, leveraging other people's resources.
So why shouldn't I?
Also, it's standard.
If I create a token, if I am Starbucks,
and I create the Starbucks point on my system,
I have to make sure that people will download the Starbucks app.
If I do that on ERC-20, every dumb person that has an Ethereum wallet
will use its Ethereum wallet in order to transfer the Starbucks point.
So there is a point in interoperability and standardness itself,
even if it's not meaningful technologically.
And the nice thing is that any kind of regulated right,
like the fiat Bitcoin example I gave before,
can actually pretend with the regulator to use this standard,
not because it's enabling a secondary black market,
but because it's doing that for interoperability,
because it's a standard, or because of transparency.
So it's even pro-regulator approach.
I mean, I'm using the blockchain not because I want liquidity from the black market.
I use the blockchain because I want to be transparent, which sounds good.
So I will use 10 minutes to give a review of past attempts to try to issue tokens on top of Bitcoin.
So the first one is asset-specific alt-chains.
So basically for every asset that you want to issue,
you copy Bitcoin and you call it Zucoin, and you bootstrap it.
This was the standard in 2011, 2012, first scum coin environment
when people started to issue any kind of asset representing things.
There were a lot of gold-based alt-coins where people were just copying Bitcoin, bootstrapping it.
This has a lot of problems.
The first problem is that you need to bootstrap everything from scratch for every single asset, so it sucks.
Also, to reach the minimum thresholds for hash rate, for security, and review and maintenance by coders is basically impossible.
So there is no current approach.
Also, the issuance policy is often incompatible with mining incentives.
So if I am Apple, I'm creating an Apple blockchain in order to issue Apple stocks.
And I cannot have a fixed supply because I cannot follow the mining incentives.
I have to follow my own security-related policy, so it doesn't work.
Then people started to propose a single asset-enabled alt-chain.
So instead of creating a new copy of Bitcoin for every asset, I just create one clone of Bitcoin,
and I will make it asset-enabled, so I have to bootstrap the ashen power and the coder mine share just once.
And if I can do that, I can issue several assets on top of that.
This is basically Ethereum, or it's also the new fixation of Bruce, RobinCoin.
So you launch a Bitcoin clone with a scam coin once, and then you leverage that.
There are a lot of problems. You still have to bootstrap from scratch, but just once.
It's still difficult to reach the main hash rate and review maintenance threshold.
You cannot reach real decentralization on the project.
That project will remain centralized around vitally booting or whatever.
You have very, very high incentives for scammers, because if you are trying to bootstrap from scrap
a new digital gold, then that's like a honeypot for scammers
that will try to profit from this new bootstrap of digital gold, scam coins.
Also, you have a very, very reduced privacy, because, for example, on Ethereum, year C20,
the anonymity set for Ethereum user is already pretty, pretty small, because it's account-based.
It's trivial to anonymize Ethereum users.
But to anonymize an year C20 token user is even more trivial, because the anonymity set of people
using that specific token, that's true also for color coin.
So anonymity on Bitcoin sucks.
Anonymity on color coin is terrible, because basically how many people is trading that exact asset?
Chain analysis with color coin is basically giving away any kind of privacy.
There is another step, which is an asset-enabled sidechain.
Instead of just recreating a Bitcoin clone, a scam coin,
I create a chain that can allow for an asset, but is reusing Bitcoin.
This is the original sidechain concept, in which you're basically reusing the Bitcoin hash rate
with merge mining, and you're reusing the Bitcoin asset with two-way pegging.
For example, SPB-based two-way pegging.
This original approach, I'm mentioning BitAsset drive chain proposal by Paul Stork,
who is here somewhere, just a few weeks ago, he proposed an asset-based sidechain.
But you have some problems.
First, you have to modify Bitcoin in order to launch this kind of sidechain.
Second, you still have reduced privacy, and you have reduced security,
because there are a lot of discussions about hash rate on the sidechain,
so there are a lot of security considerations.
Actually, I'm quoting also confidential asset over liquid,
but there are some caveats here, because the liquid is doing something different.
It's a federated model, so it doesn't have any problem with changing Bitcoin anyhow,
and it doesn't have any problem with privacy, as you can see from the star,
because privacy on confidential assets is richer using confidential assets.
So basically, cryptography on top of transaction,
where the unanimity set gets back to be the one of the total supply of tokens on the platform.
So I'm exposing past attempts, so I'm not really analyzing liquid now.
Actually, I will admit that if liquid works as intended,
impractical, if everybody can use liquid confidential assets to issue assets,
probably an on-chain protocol gets practically redundant.
At least it can be used as a security measure against censorship on the sidechain,
which is, of course, easier than the main chain.
Then we go to asset-enabled metachain.
So metachain means that instead of creating another chain,
I will just use Bitcoin transactions to store some metadata
that are parsed and understood from a meta-protocol as asset passage systems.
So these are the typical omni- or counterparty strategies to do assets.
A lot of problems here.
You still have very, very low privacy.
Also, the main problem here is that you are fighting with Bitcoin over scarce resources.
So you are counterparty. You want open return to be larger.
You want to use bare multisig to store data.
The Bitcoin nodes owners, they don't want you to do that.
You have a strict conflict of interest between people that want to use
the Bitcoin free resources to store and transmit assets,
and then you have on the other side Bitcoin that wants to minimize
the free riding over full node resources.
So this is the first problem.
The second problem is no SPV.
What we are using now is not SPV.
Call it lightweight nodes.
You cannot do lightweight nodes with metachains
because from the last transaction alone, you cannot check
because miners are not enforcing the metaprotocol rules.
So they can put metaprotocol invalid transaction inside a protocol valid transaction.
So you cannot use ashrate at all, Merkle trees inside the block.
You cannot leverage that at all.
Another very, very relevant problem is that these protocols are using a scam coin.
So you have a counterparty coin.
Some covered because the counterparty guys didn't do an ICO.
They did a proof of burn, which is kind of more honest,
but still you have a scam coin there,
which interests are basically incompatible with Bitcoin's interests.
And also the fight over scarce resources also creates a problem,
for example, for metadata.
So rare papers.
We all love rare papers, right?
The collectible cards about Keck and so on.
But you have to know that the image of the card over the collectible card
is not itself on the blockchain because there is no space for it.
There is just a commitment for it,
but then you have to store in a rare paper directory the image.
Even cryptokitties are not decentralized.
There is a centralized party storing the metadata for cryptokitties.
So it doesn't work very well.
I'm almost finishing with this review.
So correct coin protocols, they reuse.
You can do an easier pseudo SPV model because in the case of counterparty or Omni,
in order to check the transaction,
you have to download all the transaction by all the possible blocks
in order to check double spans.
While with the correct coin,
you only have to check every kind of transaction before your own in the same asset
and every kind of side transaction in order to be sure that you don't have double spans.
So you can implement pseudo SPV like Colu created a BitTorrent-based pseudo SPV model.
Also, you don't have a SCUMM coin, which is good,
but you still have all the other problems.
So the last idea is assets directly in Bitcoin consensus.
Yeah, not going to happen, so it's useless to discuss it.
And so there is another idea that was first proposed by Peter Todd
when he was working on smart coloring I think almost a couple of years ago,
which is basically client-side validation,
an idea that Peters would like to experiment on Bitcoin itself,
but applied on issued assets.
So the idea of client-side validation is that basically you do not use the blockchain
to store the metadata and the proof of transmission for the assets.
You only use the blockchain as an anti-double spending structure.
You pass the proofs of the transmission of the assets off-band.
So I give you an invoice.
In this invoice, I don't just give you my address.
I also give you a way to send me a proof.
This proof will contain all the previous proof,
and you will also relate to some Bitcoin transaction,
some Bitcoin UTXO that will be spent in order to close the seal around this proof.
So I know that you are not double spending me,
and I can do that with solving a lot of problems.
So no scam coin, no fight over scarce resources.
Still, there is a better privacy because now the privacy is nobody can look at the blockchain
and see everybody moving every kind of asset.
They have to be participants in an exchange in order to be able to track
only the previous path of the asset from the issuance to themselves.
So there is something better.
Okay, now an argument about the fact that now it could be a good time
to start a new effort about main chain Bitcoin-based assets.
So first thing, there is a new design to try.
People still didn't try to launch client-side validation-based assets.
We should try even just to validate the challenges of this kind of design.
There are a lot of challenges like how to pass proofs.
Also, there is a new market pressure.
People are using scammy blockchains to issue assets.
It's happening.
So I personally want to give to my clients a better alternative to do stuff,
which can be used tomorrow, two weeks.
And then also, I'm running late, so I probably will not go very, very in-depth about this,
but there is Segwit now and there is Lightning Network,
which were not around when the first correct coin protocol were designed
by Alex Mitseraki and other people, and that changes the game a little bit.
So what we are proposing now with the RGB experiment is a client-side validation-style design
with a possible future proof-martial integration,
which is what Peter was talking about yesterday.
It's still a super work in progress.
And with a native Lightning integration that can be used not just to color channels,
but also to use colored routing, leveraging Bitcoin liquidity.
Now I will explain what I mean.
Also, we are leveraging a lot of stuff from Lightning Network
because basically, Lightning Network already requires independent backup of the updates.
So the pain that you have with client-side validation,
which is I have to store my proofs separately from the seed,
you also have that pain in Lightning Network.
Also, you have to exchange proofs, you have to exchange updates on a peer-to-peer channel,
so you need to establish a new peer-to-peer communication,
which is especially painful for offline communication.
So I cannot pay you with Lightning when you are offline
because I need to send updates somewhere and where it is,
so we have the same problem of Lightning.
And we can leverage Lightning solution and the other way around.
And this stuff is compatible with L2, hopefully, and AMP.
We tried some experiments, it should be compatible.
We are using pay-to-contra commitments,
so we are not using OpReturn, which is easy to spot and it's expensive.
So we are basically emulating one address
to put the commitment to the proof inside that address,
and we are using the amount in another address
to indicate which output is containing the commitment.
And it's open source, no-profit, tokenless, so there will not be any RGB token.
I mean, if we are successful, there will be one, but not from us,
or somebody will try to do it.
And very community-oriented and a cool logo that you can see.
So I'm running very, very late, so I try to...
How much time do we have, Kevin?
Are you 40 minutes late?
Okay, I'm 40 minutes late.
So this is one kind of issuance,
which is basically the issuance of a collectible.
I cannot go into details, but maybe if you are interested,
I will do a YouTube video about that eventually.
So you issue a single asset, which is unfungible, like a collectible,
and then you can trade it.
There is another contract model,
which is basically people pay Bitcoin to an address in a certain amount of time,
and that payment is itself the origin of the asset,
which is basically a token sale, scam.
And there is a third kind of contract,
which is basically the origin of the asset is an UTXO on Bitcoin.
So this is basically an high drop scam.
I will go very fast about on-chain token transfer.
On-chain token transfer is you give me...
Bob gives Alice an invoice containing also an indication for an offline server.
Alice gives Bob the proof and commits the proof closing a seal on a Bitcoin UTXO.
There is also the Lightning version,
where you basically create a Lightning channel color with the token,
and then you transmit the token with zero fee and with very good privacy,
and you don't even need a server here.
This is very, very cool.
So if Alice wants to pay Erin, and they have a Lightning path between them,
but they don't have a Lightning path colored with that specific asset,
so they want to send Zuccoin from Alice to Erin,
but they don't have a Zuccoin liquid path,
they can basically exchange the proof with Bob,
which has a colored channel with Alice,
which will pass HTLC Bitcoin to Carol,
that will pass a Bitcoin Lightning transaction to Dan,
condition it to a Zuccoin transaction to Erin.
So basically, using a modification of the Bob protocol,
in which the nodes will not only publish their fees,
but they will also publish their market rate between the colored asset and the Bitcoin,
you can actually create some sort of decentralized exchange on top of Bob.
There is a conceptual way to use this in order to exchange your token with Bitcoin or vice versa,
using the Lightning network, of course the RGB compatible Lightning network,
as a DEX and giving yourself the token in exchange trustlessly.
I don't have time to go in depth.
And then there is the proof martial part,
and I have no idea how it works, and you should just ask this guy,
but also if you were not sleeping yesterday,
you should have some hint of how it works,
but I pretend to know, but I don't know.
So what we want, just that people start to take seriously this topic right now,
and you start criticizing this idea,
you help us finalizing the specifications.
So we had a Python proof of concept working about this function that I showed you,
but we deleted it, and now we want to recreate the specification for Scratch well done,
and recreate all the software in Rust.
Alekos Filini, which is there, you can recognize it from the higher,
he is the repository main developer right now,
and you can ask him about any kind of information.
We will first finalize the specification,
and then we will do the production code.
I will go around asking for donations to do this stuff to my clients.
I'm not asking for donations now,
so what I want from the Bitcoin community, if possible,
is some challenge, some interest, some criticism, or some PR, hopefully,
and I will look for money in the circle of my clients.
For our specification, this is the repository.
Right now you can find this specification inside the repository specification.
The first is an introduction, basically repeating what I said today in the presentation.
Then there is the RGB color kernel itself,
which is managing the pay-to-contract and the proof templates and so on.
There is some Rust code for this, but first we want to finish the specification.
RGB is clearly still a color coin relic.
We called it RGB when we were working on color coin,
and now we didn't change the name because we kind of like it,
but it's not anymore a strictly speaking color coin application.
Then there is the server, trustless server,
the thing that you need to put the proof temporarily.
It has to work on Tor, it has to use the BIP 157, 158 filtering to make it easier to load it.
Yeah, I know.
Okay, so just one thing which is very important.
The original name for this part was Rainbow, but that sounded too much Ethereum-like,
so we are calling it B-Frost.
Look at it, it is a Viking, so for sure it's Carnivore.
And there are some futuristic ideas,
but I will just finish with an important announcement.
I'm giving away the...
APPLAUSE
All right, so yeah, I had to run away for like an hour,
and I see we are already like 45 minutes late.
All right, so we are going to catch up.
For the question to Giacomo, you can ask him at the lunchtime.
If that's all right, because we kind of need to catch up if we want to lunchtime.
Let's see if we can just open it on here.
So far so good.
I think it should work.
All right.
Well, Giacomo promised me that he was going to warm up the crowd for me.
I believe you have successfully fulfilled that promise,
though now you've given me a bit of a time crunch,
so I'm going to see if we can get through this.
I'm Jameson Lopp.
I've been doing Bitcoin and crypto asset security for a little over three years now,
three years at BitGo and now for four or five months at Casa.
And really what I want to try to do today is just do a general brain dump
of a lot of the concepts that I've come to believe are important
that anyone who's building systems that are basically protecting private keys
should be thinking about.
So just going to give you a lot of design principles and ideas
that hopefully you can ingest and use whenever you decide to build one of these systems.
So if you've been in this space for long at all,
then you're well aware that there's a lot of risks.
There's risks to trusting third parties.
This is something that we are always fighting against
as various entities are trying to centralize aspects of this system.
And really I think the next problem once we have successfully pushed back
against trusted third parties is recognizing that users securing their own keys,
their own assets, it costs a lot of time and money for users to do this.
They have to deal with a lot of headaches because users are not security experts.
And as a result, we have a lot of different types of losses.
And a chain analysis is estimating around four million Bitcoins have been lost
and at least two million Bitcoins have been stolen.
And these numbers are actually probably higher in reality because,
at least with the stolen number, that's mainly looking at well-known publicized hacks
of like centralized services.
There's no way to really keep track of all of the different individuals that have lost money.
So there's some issues here.
For much of human history, we have seen this structure of our society evolve in a way
where we are using specialists and we are outsourcing a lot of pieces of our lives
to specialists because it allows us to be more efficient.
But the problem here, of course, is that we're generally coming to trust these third parties.
And as a result, a lot of users are fairly lackadaisical with regard to both their digital
and physical security, and I'm seeing this resulting in people trusting their Bitcoin
and other private keys to third parties.
So I think that a lot of people are not really keeping self-defense at the top of their mind,
usually because they just don't think that they're much of a target, and they may be correct.
But as I've found personally, you can not be a target for your entire life
and then become a target in a fairly quick, unexpected fashion.
And as a result, we see from having these systems that are basically creating liquid bearer assets,
the attackers tend to have different profiles than we see in traditional real-world situations.
So attackers are seeing this as a juicier target because if they can get away with it,
it's less likely that they're going to be caught.
And this actually creates a bit of a problem at a meta level,
because if a lot of people are failing to secure their own assets,
it's almost like a herd immunity type of problem.
I think that that's going to invite more and more attackers,
and I'm particularly interested in seeing the evolution of what's happening with physical attacks in this space,
because from my perspective, it seems to be accelerating,
and I think we should all try to help each other out by helping ourselves first
and trying to disincentivize these types of attacks.
So if you're building these types of systems,
there are some high-level types of attacks and defenses that you need to worry about.
We really have to build this software with the assumption
that the average user is going to put minimal effort into securing their own assets,
and we need to do everything that we can to be proactive about helping the users help themselves and help educate them.
So with physical theft, that's a pretty well-known problem humans have been dealing with for the entire sum of human history.
Digital theft is also easy to fix.
All you have to do is take it off the Internet.
We have hardware devices that make it fairly easy to do that these days.
Physical disaster, that's really just an IT problem,
but, of course, most people are terrible at doing good IT practices,
so we need to try to help people automatically have redundant storage.
The bigger problem, I think, long-term, of course, is going to be social engineering,
and that's where education comes in, basically helping users understand
that they are constantly under threat of being hacked,
not just in a digital sense, but having their brain hacked by social engineers.
And, of course, collusion, that really comes down to having trusted third parties
and really minimizing the trust in these systems.
So if we're talking about private keys and how we're managing them,
there is, of course, an infinite number of different ways you can set this up,
but traditionally, if it's just the user holding a key,
there's a lot of different problems. They can get malware that steals it.
You might have a weak password that gets brute-forced.
They can be coerced, of course. We heard about the, like, $5 wrench attacks.
The death of owners, end-of-life issues,
is something that a lot of people have not thought about.
Big fan of Pamela Morgan and her book that she put out recently
talking about these issues. I learned a lot from it myself.
Of course, data loss, just due to bad IT practices.
Forgotten password, of course, another type of data loss.
And phishing, of course, the hacking of the brain is always going to be a problem.
Or if we go the other route where the service's custodial has the keys,
they could also get malware and viruses.
They are actually creating juicy targets where they're creating a honeypot
where hackers only need to go get in through one door to get a lot of money
rather than a lot of different doors.
Insider theft, once again, a trust issue.
Fractional reserve, we saw that with Mt. Gox and possibly some other services.
You don't know what's happening if you can't audit it.
Government seizure hasn't seemed to be a big problem yet, but you never know.
Data loss should not be as big of a problem, presumably,
if there's an entire team of people that are managing it, but it's still a possibility.
And of course, confiscation by the service.
And this is happening pretty often at a lot of the AML KYC places
that are arbitrarily seizing people's accounts
and requiring them to provide all kinds of outrageous information
to get their money.
And even phishing can happen on the enterprise service side.
In fact, at BitGo, we saw some of the most sophisticated spear phishing attacks
against our own employees that I've ever seen in my entire career.
So it's just because you're creating those honeypots,
attackers are going to put a lot more effort into it.
Now, if we take this to the next level and turn it into like a two-of-two situation,
we can start to get rid of some of these weaknesses
because you've got two different parties and they're kind of watching each other's backs.
But you see there's a lot of stuff that we still haven't fixed,
mostly around data loss, and that's because we don't really have much redundancy.
Now you have a situation where with either one of these parties screws up,
then you can potentially lose access to the assets.
So I think the next logical step is, well, you give the user multiple keys.
So this allows the user to be in full control.
They are the custodian. They're not using a third party as a custodian.
They're just using a third party as sort of a service provider, a facilitator.
And that third party can provide different functions around recovery
and around preventing things like fractional reserve from happening
because in a situation like this, the user can actually audit what's going on
because the wallets are segregated rather than all pulled together.
And really, fundamentally, while we can't 100% solve all of these problems,
we're bringing down the risk quite a bit.
But the main risk that is going to still be there, of course, is phishing on both sides.
So from a high-level objective standpoint, of course,
we want to get rid of third parties and attackers.
But one thing that I'm going to try to push here is that I think that the user is their own worst enemy in these systems.
And a principle that we had at BitGo, which I thought worked pretty well,
was that it's preferable for the user to temporarily get locked out
than for an attacker to get in even momentarily.
And what I think that we should do when we're engineering the system is actually flip it.
Personally, I have seen far more users lose access due to negligence
than I have seen them lose access due to an attacker stealing money from them.
And, of course, if we look back to that first slide,
those estimates, which you could argue about how accurate they are,
tend to suggest that data loss is probably a bigger problem than attackers.
But especially when we're getting to the point now where we do have a number of options in these systems
where we've pushed the security out to the edges and the users have more sovereignty,
then I think that they're more likely to experience loss due to their negligence.
So how do we actually build a Bitcoin bank?
Well, if you've ever used Bitcoin, it's pretty familiar.
All you have to do, step one, write down that 24-word seed phrase and keep it safe.
You know, this probably seems normal to most of us who have operated in the system,
but from an outsider, this is actually kind of insane.
I mean, it's like saying, here, have some radioactive material, put it in a safe place.
I mean, a safe place, what normal person really knows how to properly store even a small amount of digital data?
I mean, we've opened up a whole can of worms with this very simple suggestion
that a lot of wallets give you when you're first initializing them.
I think that we can agree that, at least outside of this room,
there are very few security experts who know how to properly manage this system.
So I'm actually going to consider this a fail, and this may be a bit controversial,
but I believe that we won't really be able to get to a level of mainstream adoption
if we are requiring people to keep even small amounts of data perfectly safe
where they have no recourse if they don't have great IT practices.
And here's an interesting thing, and I'm not trying to rag on Trezor or anything.
This is really part of a thesis that we have at CASA that if a user should not be entrusted
to be managing and manipulating raw private keys by hand,
then logically it doesn't really make any sense that we should be requiring users to hold on to the seeds,
which are really the roots to all of these keys.
And just a few days ago, we saw this phishing attack against Trezor users
that was trying to exploit this vulnerability.
And last I heard, it's not clear if this was a DNS poisoning or a BGP attack or whatever.
It doesn't really matter.
The point is that we're in a phase now where we have fairly secure hardware,
and so this proliferation of secure hardware has made it more obvious
that the weakest point is in fact the user.
And unfortunately, it's very difficult to get rid of the user out of these systems.
I've tried it for my entire career, but the user just keeps coming back
and managing to find new vulnerabilities to create.
So there's a number, well, probably even an infinite number of ways
that you can store and recover data, and it's only really limited to your imagination.
At CASA, we've actually created a fairly easy-to-use wizard
where the user can rotate the keys in their wallets,
and this works well due to the multi-sig, multi-device, multi-location aspect
of our Vault product that we've set up.
There's also another seedless account recovery that I'm aware of.
The Edge wallet has a setup, which is basically a two-of-two scheme
where you have a key that is sent to your email,
and then you have another key that is encrypted and on the Edge servers,
and the way that you decrypt it is through basically account recovery questions
that you have to answer.
I would like to see a lot more work happening in this space.
I can give you a little preview here of the way that it works in CASA.
So basically, you go in, you hit a device, you mark it as compromised
because you've lost it, and then you begin the process.
You go buy a new Trezor, you plug it in, we get the ex-pub off of there,
so we now have the new set of public keys that we're going to rotate your wallet over to.
And once we have that new set of public keys,
then you see we need to transfer the funds,
so you select the account that you want to rotate,
and you then just have to start adding signatures.
This is a three-of-five multi-sig scheme.
This, in reality, would take a lot longer
because your hardware should be geographically separated.
But once you have added all of your signatures,
let's see, this should be the second signature,
and then add the final signature,
you will have a fully complete and valid Bitcoin transaction
that you can then broadcast.
And due to Testnet, of course, always having fun time,
you then have to duplicate that process for any account that you have,
but it should be a lot more simple than having to go dig out private key seed phrase from somewhere
that you may have issues with how you've stored it, how you've recovered it.
This entire process allows you to visualize fairly seamlessly
a way to recover your private keys
without ever having to physically touch any of that sensitive data.
And I think this is an interesting first step
towards allowing users to operate in a system like this
without having to touch the private keys.
There's a lot of people out there who say,
oh, well, it's so easy to just create a paper wallet,
send your money to it, and you're good to go.
But we've seen a lot of people lose money in paper wallets.
A, it's hard to generate those private keys securely.
Also, if it's an unencrypted paper wallet,
you suddenly have physical attackers could easily get it and sweep your wallet.
Paper wallets are not particularly robust against environmental disaster.
And then there's also this weird edge issue that some people have hit
where if it's a paper wallet with a single private key,
sometimes people will load that into their digital wallet
and create a transaction that only sends part of the value,
and then the rest of the value gets sent to a change address.
And that change address isn't actually, the private key isn't stored anywhere,
and then they don't understand what's happening, they throw it away,
and they have accidentally lost the vast majority of the money in that wallet.
Metal wallets are better.
They still have the physical attacker problem if they're unencrypted.
They are more robust against environmental factors.
A month from now, I'm going to be publishing an in-depth stress test
of all of the popular metal wallets.
It's going to be interesting to see how they stand up.
I actually managed to get access to a 20-ton hydraulic press,
so I really mean stress test when I say stress test.
And then the improper transaction construction is not a problem
if you're putting down a whole seed phrase,
but there are some metal wallets where people just put a single private key on them.
So really, we need more redundancy.
Once we've succeeded in protecting the users from trusted third parties,
it becomes more of this redundancy IT problem,
where we're just trying to keep the users from losing their own keys.
Users should not be relied upon to perform even the most basic IT practices,
and so we need to help them do that.
And I think we can all agree that five RICs are better than one.
So this was my personal solution before we started doing CASA.
I would basically have to spend an entire day every year doing this,
where I would get an AirGap computer, I'd create a Veracrypt partition
that I generated with an insanely long randomly generated passphrase.
I then put all my private key data into that,
basically all the recovery data that was necessary for my errors to know.
Then I'd use Shamir's secret sharing scheme to take that insanely long decryption passphrase
and shard it into an M of N setup based upon how many errors I had
and how much redundancy I wanted,
copy this encrypted file onto N different USB drives,
and put a text file with the one Shamir shard on that drive for that person,
along with a text document, of course, of the instructions,
hand out these USB drives in Faraday bags to each of my executors,
and update annually to protect against bit rot.
Now, then of course the process of writing down and testing the entire instruction set
was what took up even more of my time,
because if you don't test it, you're almost guaranteed to have a failure.
And this is because complexity is the enemy of security.
And when we're thinking about end of life issues especially,
we need to realize that these applications that we're creating,
we're not just creating them for the people who are in this room,
the enthusiastic early adopters who are probably pretty nerdy
and are willing to put a fair amount of effort into making these things work.
We also need to make sure that our heirs can navigate these systems
because they're going to be pretty upset if you get hit by a truck
and they can't access anything.
So how to actually build a bitcoin bank,
or a crypto castle is this concept that I came up with
after I actually submitted the talk.
Using some of these basic building blocks of air gapping
to protect you from the digital attackers,
and hardware devices are good at that.
Using strong crypto and multisig as basic building blocks to add redundancy
and also add more layers of protection against someone who might get a single key.
Hardware managers are protected by pins,
making it very difficult for someone to get at those private keys as well.
And the wallet software really being this overarching gatehouse, if you will,
managing all the different complexities of what's going on under the hood,
trying to abstract away the complexities to bring some usability, user friendliness into it.
Automated alerts are also helpful so that people don't have to be constantly
checking on the status of their wallets.
And duress kill switches are something that I think we could also use
some more investigation and development in.
And so we're actually in the design phase of better duress switches at CASA.
And we're just thinking about ways that we can leverage the software
that is now available on mobile devices.
And this especially is interesting if you start looking at
some of the improved object detection and facial expression detection software
that you can get out there.
We're even thinking about playing around with potentially developing a way
that you can facially signal to your wallet that you're under duress.
Like imagine being able to blink an SOS or stick out your tongue
or flare your nostrils or something like that in a way that you could,
even if you're under duress with a physical attacker right in your face,
they would not really be able to say, oh, you just disabled your wallet.
But that's more of a long-term thing.
So trust minimization, of course, is a big deal if we're trying to build
systems where we're using third parties but we don't want them to be trusted.
Because us building a team enables us to come together and build software
at a pace that wouldn't be possible if we were all just working on
little things by ourselves.
But the problem is you can easily centralize it in a way that makes
failure scenarios much more likely.
So really what we're trying to do is make a balance between like
low trust and convenience versus high trust and convenience.
And by pushing the security out to the edges,
I think that we can allow for untrusted third parties to help facilitate
bank-like relationships where we are providing financial services
without actually being custodians.
And that's important when you can actually do things like having a key
on a device that you are then physically or you're cryptographically
signing data with that gets stored on the server so that you can actually
be protected against insider attacks if a hacker manages to get into that
third party server and screw with the data.
As long as you have integrity checks and like signatures on that data
that are checked on the client side, then you can throw up alarms and
basically shut down any operations before you get deceived by whatever
data is on that third party service.
And of course, as several people yesterday noted,
I think that a full stack integration where you can have a node or a
miniature server running at home in your own trusted environment is going
to be something long term that we're going to see a number of people try
to work on and hopefully get plug and play going.
So Bitcoin is this new paradigm.
It throws a lot of users for a loop because they've been conditioned to
trust third party specialists to fix whatever problems have happened in the
system that they're using.
You lose your password, you get it reset, you have a fraudulent charge,
you have someone step in and basically reverse it for you,
but not so much in this system.
So if the average user is not going to read the manual,
they're not going to make any sufficient effort to try to secure their own data,
then we need to do what we can to build guide rails to kind of force the
user to go through educational processes.
And really what we're trying to do at CASA is do that in a user-friendly
visual format where we're actually trying to visualize the security in
real time or at least as well as we can to let people have a better
understanding of what's going on with their wallet.
And of course, once again, we come back to the hacking of the brains,
is that people are going to get tricked.
You can't save everybody, even with the strongest technical back end security.
But there are some things that you can do.
And one thing that I've seen in some wallets that's very helpful is if
you're sending a large amount of money,
just have a little pop-up that says, hey, this is a lot.
You should not be pasting this address in from your clipboard.
You should be calling up or using out-of-band communications to verify the
address manually with the recipient to make sure that it's actually going
where you want.
I'm also interested in seeing Check Lock Time Verify get used more because,
after all, if you're cryptographically prevented from spending your money,
then you can't be socially engineered out of it.
This does pose a few trade-offs, though,
if you're trying to implement it with a multisig system because it becomes
an issue if your funds are all locked up,
but then you've lost a key or two and you need to do a recovery.
So I'm hoping that we can figure out some ways to do sort of like a graceful
degradation of a multisig where we say, okay,
we're locking it up for the next year,
but we can degrade from three out of five to two out of five after a year
and from two out of five to one out of five after a couple of years if nobody
is touching this money.
Really, whatever makes the user comfortable.
This, of course, gets more complicated on the technical side.
I'm hoping that MAST or something like that is going to be able to make these
more complicated scripting solutions possible and also more private.
And Malware Blacklist.
So Blacklist is a loaded term.
A lot of people get triggered by this,
but we actually successfully implemented Malware Blacklist at BitGo where what
we were doing is going out and finding all that clipboard Malware that's just
listening for addresses and swapping it out with the attacker's addresses.
And whenever we saw a transaction that was going to one of those addresses,
we would just refuse to co-sign it.
And we managed to save tens of thousands of dollars from going into these
Malware authors' pockets.
And then finally, long-term solutions.
I'm hoping to see more KYC, but by KYC I mean know your counterparty.
Better reputation features, basically.
I think a lot of people here are well aware that we need a better web of trust
slash reputation systems that a number of people are working on that.
And, of course, Bitcoin covenants.
I believe they have actually been implemented on the elements side chain,
and hopefully someday we will see those on the main net as well.
So hopefully, you know, if you're able to ingest a lot of these things,
then you'll have a little bit better preparation for starting to build your own
crypto castle and build crypto castles for the rest of the world.
If we have any time, hopefully I can take some questions.
Thanks.
Where were you getting the sources for those blacklists?
Were you, like, scanning, like, Chrome extensions?
I believe it was actually from, like, Kaspersky and other security
researchers that had, like, looked into the binaries to find those addresses.
So you bought data from them or, like, a blog post or something that listed the data?
They were posting their findings.
Yeah, it was publicly available data.
Thanks for the talk.
One question.
You mentioned that you do kind of rotate the keys when some action or event happens.
How about the privacy implications?
I mean, if the user is going to think, okay, everything is okay,
but then you forward all the funds to a single new address,
did you make any thoughts about how to prevent, like, the whole history
or how to not hurt the privacy?
Yeah, so actually I posted a blog about kind of the privacy features at CASA.
And to be honest, if you want really good privacy, you should not use our solution.
It's really meant to be more of a vaulting product with very low volume.
So there's not going to û it's not going to be easy to, like, obscure the UTXOs
because we expect there's only going to be a handful of them in the first place.
And also, you know, whenever you're using a third-party service,
even if it's non-custodial, if they're just facilitating stuff,
it's very hard to have strong privacy because you have to interact with them.
So, you know, the only way to get, like, true strong privacy in these systems
is to operate in a way that you are fully self-contained,
you're running all of your software and hardware yourself
and not interacting with any third parties who might know your IP address
or your identity or what have you.
So it's, you know, it's trade-offs.
And really what we're going for is more convenience and security,
and of course that is kind of at the expense of privacy.
But you are more than welcome to sign up with us using a pseudonym and pay anonymously.
It's just not going to be perfect privacy.
Thanks for the talk. It was super.
I was just wondering if you'd seen any interesting solutions to recipient verification
because once you've optimized the storage and the transaction side,
it feels to me like the weakest point for the funds is whenever you're making a transaction.
And especially when you're sending to organizations,
how do you ensure that the address belongs to those people
without, like, having to make, like, a Skype call or a phone call or a video call or something like that?
Well, I think that at least the first time that you are sending a transaction to an entity,
you should do some sort of out-of-band communication.
Now, if you're then, you know, making multiple recurring payments,
you can be pretty well assured that, you know, that address is going to continue to work.
But it almost comes down to an identity problem once again, right?
And so, you know, these, like, decentralized identity services that are popping up,
some of them, or at least I believe on Blockstack, you know,
you can associate your Bitcoin address with your identity.
So I would think it would have to be something like that,
where you're actually tying the addresses to an identity that is at least somewhat immutable.
Thanks.
Great. Thanks.
Okay. Next up is going to be Eric.
And...
Go ahead.
Go ahead.
Go ahead.
Go ahead.
Go ahead.
Go ahead.
Sorry to take everybody's lunch.
We'll blame Giacomo for that.
I'm...
Jesus, this is making a lot of noise.
This is me.
If you want to contact me, the numbers are on the right.
Well, that's probably not going to be good.
So when I first suggested, you know, doing a talk here on the Bitcoin...
How's that? Okay. That's good?
One of the piece of feedback I got initially was, well, the Bitcoin is Bitcoin.
What are you building on Bitcoin?
So the Bitcoin is actually more, which is what I'm going to talk about,
but also going to talk a little bit about what it is underneath,
because it really is an implementation of Bitcoin as well.
So I also...
Most of the talks I give are on crypto-economics.
I really don't talk about the Bitcoin very much.
In my opinion, up until more recently, it hasn't been mature enough to go out and promote.
I still feel that. I probably will always feel that way.
So this is one of the first talks I've given on the Bitcoin, actually.
So to me, it's important to cover some of the crypto-economic principles behind what we're doing.
Otherwise, you know, what are we doing? We wouldn't really understand it.
So building on Bitcoin really is more than just building financial tools that use Bitcoin.
It's really about building on Bitcoin, making Bitcoin not something that pulls people away from Bitcoin.
So tools that increase individual power enhance it, and tools that reduce individual power diminish it.
And what I'm talking about by individual power is what say you have in Bitcoin, how you help protect it.
In other words, if everybody moves off to a centralized system for validation for, say, mining,
one person has say in everything.
So what we want to do is build tools that build on Bitcoin, not tools that pull people away from Bitcoin.
I have a slide coming up that will talk a little bit more about that.
But this is really what Bitcoin is all about, helping people build Bitcoin stuff,
not encouraging people to use, say, a centralized API or service that really takes that power away from them.
So that power in terms of security is expressed by miners and merchants.
Miners secure confirmation and merchants secure the rules.
They validate in a way that matters.
So independent exercise of power implies you're doing it covertly.
If you're doing all this very publicly and somebody can step in and say don't do that and you're forced to comply,
you really don't have the power.
The person that has the ability to force you to comply has the power.
So when we talk about decentralization and security in Bitcoin as a system,
you have to ask yourself why does decentralization matter?
I mean, a lot of companies, corporations can be like McDonald's is highly decentralized.
McDonald's is everywhere, right?
They're all over the place.
But you can step in and enforce them to apply a tax law, right?
Not a problem.
So it's more than just decentralization.
Decentralization exists so that people can hide.
They have to operate at small scale.
So it's really about anonymity is the essential security aspect of Bitcoin.
Decentralization is just another way that people are allowed to be anonymous.
If you're big, you can't hide.
So Bitcoin relies on verifiable public data to achieve anonymity.
There's no identity in the system.
There's no permission required.
Well, how does it achieve that?
It doesn't achieve that through encrypted channels or nodes with identity the way banking systems work.
It does that by giving everybody a copy of the same public data and allowing people to verify the data.
So large operations are inconsistent with anonymity.
Big corporate server farm that can be taken down.
It's not anonymous even if there's no names attached to it because it's visible, identifiable.
So decentralization is important.
So Bitcoin requires competitive performance for small operations.
Sorry, hold on a second.
Give me a cup of water.
I'm losing my voice already.
So competitive performance for small operations.
You have to build a mine at a low level, small, and be competitive for Bitcoin to really work.
If the only people who can do it are a couple of large server farms, Bitcoin is not secure in any way.
Or it's secure for the few people that do it as long as they're allowed to do it.
So in terms of, you know, I mentioned mining, the other half of the security model is merchanting.
When you sell somebody something for Bitcoin and you validate that coin, you're providing security for the entire system.
You have a say.
But if that's all done publicly, large scale, you don't have the say.
The people that have the ability to force you to do things have the say.
So are there, you know, shortcuts to everybody who has a say having a full node?
There's some, you know, things that we look at as possibilities.
But so non-economic nodes, you know, just throwing up 10,000 validating nodes on, you know, Amazon, right?
Completely irrelevant.
It does nothing for the security of the system.
They're non-economic.
They can't say no to a sale.
Layering, lightning, whatever, does not change the node requirement.
Every individual still needs to run their own node.
Pruning does not remove the full chain validation requirement unless you want to, again, trust a central authority for, you know, for ensuring that the data is valid.
Checkpointing, same thing.
SPV, we've heard a lot about that.
Reduces individual power because you're delegating some part of the validation to somebody else.
So the point I'm trying to make here is that Bitcoin requires people to be able to run full nodes either as miners or as merchants.
And they really can't get away with it.
They can't get away with not doing it.
So with Bitcoin, we're really focused on the Bitcoin stack right now because there's still a lot of work to be done to make that very usable for development.
So people can build on Bitcoin, not pull people away.
So these are Amir Taki started with Bitcoin in 2011.
Bitcoin is the first, you know, full implementation of Bitcoin after Satoshi's implementation.
It's taken a while to become more mature, but it's been around for quite a while.
So these are the three principles Amir laid out when we started.
And you can, if you kind of read between the lines a little bit, he's really saying what I'm talking about.
We need to be able to, these things need to perform well.
They need to be private.
And so that the system remains secure.
Individuals have say, and they can do it without asking for permission, which means they have to be able to hide.
So quick over. This is the Bitcoin stack on the left side here.
We're looking at the client side components on the right side.
The server components are some duplication because there's some shared components on the right.
You see the list of repositories and GitHub that implement the different pieces.
The blue boxes are Bitcoin.
The gray boxes are dependencies.
The dashed lines are optional dependencies that are only required in a very limited number of cases.
So if you look closely, you'll see that there's actually very, very little.
This is a C++ developer toolkit.
Boost is a primary dependency if you see C++ types.
And Libsac P266K1 is another.
Otherwise, unless you're doing client server stuff, there's nothing else.
Our server sits on top of the node, inherits the node, uses 0MQ as a client server protocol stack.
So Bitcoin server, we have a node.
And then the Bitcoin server is a compilation of additional code on top of the node.
And this is built on Bitcoin.
This is itself not part of the Bitcoin protocol.
So it provides command line options, configuration settings as an executable.
So you can actually run BS as a single file.
But there's an entire library which implements all this stuff.
So if you want to build your own code, take the library, build your own user interface over it.
So again, 0MQ.
Before we're adding WebSockets, I haven't been a big fan of using HTTP for client server interfaces.
But it's really nice for certain local machine operations, open up a browser, talk to the node.
So we'll be adding that.
So again, building on Bitcoin.
The client server interface includes robust query services, payment subscription, and block and transaction broadcast.
So pretty much if you think about the RPC interface that you're used to, this replaces that with a very robust 0MQ-based client server interface.
That's just a screenshot of the server doing its thing.
Sorry.
So Bitcoin Explorer is on the other side, the client side.
So we have an executable that you can use to actually run the node and server.
And then on the client side, there's an executable that's basically designed as administrator tooling.
So command line options to talk to the server, do cryptographic primitives, make transactions, you know, about 80 or so different commands.
It's very similar to the server in its operation.
It's a nice good library that you can build over if you want to, but also it compiles into an executable single file.
So again, very easy to deploy and maintain.
No dependencies.
We've got a bunch of these things that describe the command operations.
The boxes and the circles are data types.
These little things, HT to EC, for example, these are commands that you can execute on the command line to transition between these different data types.
So the full set of commands, that's the quantity of them anyway and what they do.
So I just have a few more slides.
My focus here was really not to talk about all the things that is LeBitcoin.
We're doing some new interesting things on performance.
And that was really the point of describing why performance is so important because we wanted to talk about some of the new interesting things.
So these four topics.
So LeBitcoin is very different than what you're familiar with in terms of full node implementations.
There's no transaction memory pool.
There's no block memory pool.
There's no signature script cache.
No one's spent output store.
And no data ever gets deleted or reordered in the store.
So how do you do that?
The store is a small number of memory mapped files.
And the idea is as you have more RAM, the more the data tends to stay in RAM, so you're never hitting the disk when you're querying.
So if you're running a high performance server that has like mine, 256 gig of RAM and the store is smaller than that, so the entire store can just sit there in RAM.
The files are arrays and hash tables.
So we get constant time lookup for every single thing that we ask for on the chain.
So constant time lookup in memory.
And if you're û XeroMQ, the client-server interface that we have, can actually û you can use in-process bindings, which means if you're running an application on the same machine, you can actually run these queries in process with the server.
Have your client û or run them out of process or run them over the Internet.
Use secure TCP communications.
Curve CP is the client-server secure protocol that we provide.
So you can scale your client, your wallet app or your mining app that's sitting on top of the node away from the box, or you can have it very close, depending on what your performance requirements are.
So not only constant time, but extremely high performance.
And I think I saw yesterday there was a description of how many wallets you could run off of Bitcoin D. Was it 200 or something like that?
That to me is obscenely low.
You should be able to run millions off of one server.
You know, obviously if you're doing large-scale operations like that, yeah, it's more hardware, but that is the essence of scalability.
More hardware, more performance, preferably in a linear fashion, right?
So interesting û people talk about Bitcoin scalability.
Bitcoin in terms of transaction volume is perfectly non-scalable.
You cannot add any more hardware and make Bitcoin process more transactions.
But what's also interesting, and this is just not related to this slide at all, but it's interesting when it comes to layering, is that Bitcoin is infinitely scalable when it comes to value transfer.
You can transfer all of the value of Bitcoin, theoretically, in one transaction.
So you have zero scalability in transaction volume and infinite scalability in value transfer, and that's really what layering is doing, is taking advantage of the ability to transfer large amounts of value and small amounts of data without having to increase transaction volume.
So anyway, when we talk about scalability of the know, we're talking about something very different.
Not scaling the number of transactions, but improving the performance of your query operations, for example, by just adding more hardware, including adding more boxes.
You want to run 10 servers, it's fine.
You can load balance your queries across all of them.
So in achieving this, we're not making compromises.
We're not making a larger store.
It's actually smaller.
So we had this like five or seven files, depending on whether you're running node or server, that implement the database.
We always index all transactions.
I think in Bitcoin D, that's a command line option to index transactions.
I don't know why that isn't always the case, but we always index spent by who spent that output, which is, if you do it wrong, it's a huge amount of data.
But we end up with a data store that's actually about the same size as Bitcoin D without its transaction indexing.
I don't know what it is with it.
And if you're familiar with ElectrumX, what ElectrumX does is provides an additional index over top of Bitcoin D store.
I've never run it, but basically, you let Bitcoin D sync the entire chain, and then you're going to re-index on top of that, potentially concurrently, an additional, I think it's right now, probably about 35 gig of data.
So our server just indexes all that data, and it ends up with a smaller size store.
So in terms of time, I don't know if we, yes, we're almost there. I think this is my last slide, actually.
I want to hurry up and let everybody get to lunch.
So data size is not larger. It's either the same or smaller, depending on the scenario.
And query performance is, I don't think you'll find anything better.
We don't have sufficient numbers to cross the whole ecosystem to tell you that definitively, but I'd challenge anybody to find something that's better.
But as far as syncing the chain, right now in version 3, it's horrible. It's really slow.
That's because last year when we were, a year and a half ago or so, when we were releasing V3, we were doing some prototyping on fast initial block download.
We got to the point where, so we fully parallelized the database, so we can write blocks and transactions at the same time for multiple peers.
So that's great. And we did some testing and got to, we synced, it's about a year ago, so there's less data,
but synced the entire Bitcoin mainnet chain in 15 minutes off of a fast network.
So a bunch of Bitcoin D nodes running on the same LAN. But that's pretty good.
But I didn't like it because we were relying on checkpoints to skip validation and to allow us to parallel.
In other words, if you have a known block, say at three, 400,000 height,
you can kind of grab all the blocks that are below it in parallel and wait till they're all filled in and now you've got the whole chain.
But if you don't have that, how do you do it? How do you know when to start? That's a hard problem.
So the solution relied on that, which I saw as a weakness. And so we decided let's just not, there's a way to do this.
It's going to take quite a while to implement. So we're going to ship V3 with a very naive initial block down or syncing process.
And we'll do the work and finish it before. So if you use the Bitcoin node server right now, that's what you'll notice.
Everything performs really great except for initial block downloads kind of slow.
Not horribly so, but it's not nearly what I would like to see.
I'd like to see an order of magnitude improvement over Bitcoin D. So we've been shooting for it for a while.
So how does that work? So getting initial block download parallelized all the time.
So it's not initial block download. It's continuous parallel block download is really my challenge or our challenge.
And the way we achieve that was by maintaining. So again, we don't we don't have like a lot of stuff stored in RAM.
Everything gets put on the disk as we validate. It stays there.
And if a transaction shows up in one block and it gets reorged out, comes up in another block, comes into the mempool, it doesn't matter.
It's always the same transaction. It's been validated. It's on the disk. It stays there.
And we deal with things like, you know, soft works and rule changes, but I won't go into how.
So we end up building a tree of block header metadata as the node starts up.
We build this tree and we we get to the point where the tree is current.
We have the strongest chain and then we reorganize that we organize that onto the disk.
So we have a candidate array. These are these are blocks that are potentially going to be confirmed.
We believe it's the strongest chain. So now we start downloading what we do it in parallel.
So so tree blocks. Usually it's going to be, you know, just a list.
But once we find the longest branch in the tree, we commit that that's being committed to disk as it becomes long as once it becomes current.
In other words, we were now in the current time frame based on timestamp.
We just start downloading in parallel from any number of peers that you've configured.
We use things like standard deviation to determine which peers are fast, which peers are slow.
And we kind of weed out the slower peers during this process because it doesn't matter.
We don't need to give priority to smaller or slower peers because we already know the blocks we're getting.
So they're not kind of voting on what's the strong chain. We're not cutting anybody out.
We just want to we just want to hit the peers that are giving the fastest response.
So we we kind of build up speed as the as the data is coming in from eight peers by default, but as many as you want.
And we write all that we write all the blocks to disk concurrently.
We do the minimum required level validation to know that it's that it's expensive data for somebody to fake.
In other words, it's it's got proof of work associated with all the transactions lock in and they all get put to the disk at the same time.
That's so doing this now with this this technique of describe, we don't we don't have to rely on any checkpoints.
We're relying on having the strongest chain with current time frame.
And that can change constantly. So we're always dealing with a candidate chain and a confirmed chain.
So there's you've got you've got two chains basically on disk.
One is the strong chain that you're constantly querying, you know, is confirmed.
The other next one is we know there's a stronger one out there.
So we're going to start downloading blocks on that chain because here comes it may just be the next block, but it may be a very deep york happening.
Or maybe you shut off your node for a while and you bring it back up and there's a thousand blocks behind.
We were always building this candidate chain once we know it's stronger.
Then we start downloading its blocks and we always do that in parallel.
Once we have all the blocks we do if you're depending on where you are, if you're validating these blocks,
there's a validation chaser that comes in behind them as they get downloaded and sequentially performs the validation in parallel, et cetera.
So that allows us to reorg the candidate chain into the strong chain on a continuous basis.
So anyway, the met the gist of it is we get we get to bring in blocks all at the same time,
put them on the disk at the same time from any number of peers.
So you can sync the chain.
I think now we're looking at about on my machine about two and a half hours to sync all of Bitcoin Mainnet without server indexing.
Server indexing should probably I think we're looking at additional 15 minutes,
which means that all the address indexing and just the address indexing is the only additional index now.
So pretty good on the same machine Bitcoin D I think takes about 12 hours.
So not quite at order of magnitude improvement yet, but we haven't done any additional optimization over the initial implementation.
So maybe we'll get there anyway.
So the idea is simple, small node server interface that's robust, reliable, Internet capable, highly performant that you can build applications on while it's mining stacks
that don't force people to rely on a centralized API service and do it in a way that's very easy to deploy.
And I take this one file and put it on your machine.
Hopefully, at some point, we get that to the point where we can do it mobile.
You know, we can do it embedded. You have a little tiny microchip that can validate your money.
That would be ideal, right?
Someday, as long as we don't make blocks bigger, people will catch up.
Anyway, that's the presentation lunch is coming up.
Any questions?
So one of the biggest pain programming on Bitcoin Core's RPC that it does not tell you who spent an output.
And I always thought there is a very good reason for that.
But now you said you are you are telling you are indexing that who spent an output.
Is that right?
Yeah, sorry. So when you just maybe restated, but the answer is yes, we do that.
If you have if you have an output and you want to know who spent it, that's actually a hard question.
If you don't index that data, you have to scan the entire blockchain to find it. Right.
So so we index the data as it as it comes in in V3.
We actually have this goes back to Amir's initial implementation.
We have a table that's the spenders of outputs.
And what you do is you take the output point, which is the hash and the and the index of the output in a in a given transaction.
And you hash that and you put it into a hash table.
And then you look when you're trying to find the spender, you go into there and then you find, you know, when we when it gets spent,
we write data into that hash table so that can be easily queried and recovered in constant time.
The problem is it's about seventy five gig of data.
Right. That's a huge amount of data when you compare it to the chain is now maybe three hundred two fifty or something.
One hundred fifty. I can't remember.
It's a big amount of data. And I never like that.
But the original implementation relied on that table as part of the validation process.
And what happened was in V3, excuse me, I made a change to the to the data store a little bit that instead of relying on the spender,
which also I think it also encodes the height, right.
The height of the spent. So instead of having to rely on that, we just put a little bit of extra metadata into the transaction storage
so that the spent for every output, the spender height is encoded into the store.
So that's, I don't know, megs of data, not not really significant compared to the size of that seventy five gig table.
So that made validation faster because we didn't have to rely on that spender table.
And that spender table then wasn't necessary for the node at all.
So it's only provided in the server in V3 so that it can answer that one query, which is who spent this output.
And it's a great thing to be able to answer, but it's expensive.
So all of a sudden it dawned on me that now and before we don't need the table.
You know, I don't know why it wasn't obvious to me when we did V3.
So in V4, we just remember it's no longer an aspect of validation.
This is just to answer somebody's query who's running a wallet or some service.
So performance is still still great, but it wasn't necessary to make it completely maximally performant.
So it's still constant time, but the way it's done now is you go to the output, you look up the output, and you still have the spender height.
It's already stored there. We did that, you know, V3.
And then we look at the spender height, well, we just go grab that block and we scan every transaction in the block until we find it.
It's constant time. Blocks are one megs, right?
So it's, you know, very fast still.
It's always basically searching, you know, potentially one meg of data in RAM.
It takes almost no time, a millisecond query or something.
So, yeah, we do it and it's going to be better in V4.
And what's really interesting about this is, okay, so we took this index out and you think, okay, well, the process now that I'm describing is a slower process.
If you're an engineer, you're thinking, okay, it's still constant time, but it's going to take more time.
Probably not the case. We haven't run any numbers on this yet.
But think about it. Every time we bring a block in or transactions in and we index that data, we're writing this table and it's getting up to 75 gig.
So it not only slows down the bringing in of new blocks, but then when we're querying that table, those pages have to be brought in and out of RAM.
This is a memory map file system, right?
So paging is something that we're always looking at. We always want to minimize that.
So we're no longer paging all that data. We're just working in the data we were already loading previously.
So it reduces the amount of data we have to write significantly and it reduces the amount of data we have to read when we're answering that query.
So I believe it will actually come out faster when we give it a really close look.
Good engineering, I guess. I don't know. It's fun.
Questions, comments, smart remarks?
Lunch?
Okay, so now on the program there is a panel, but everybody's hungry, so let's just go get lunch.
So for the vegan, actually, I don't know if there are any in the room.
But yesterday I think that was a problem, so if you need a vegan meal, you just go where they are preparing the food.
It's like on one of the rooms on the right.
So you go there and you ask for a vegan meal and you will have it.
So like yesterday, you're welcome to go this way for food. Thanks.
Thank you.
Thank you.
Thank you.
Thank you.
Thank you.
